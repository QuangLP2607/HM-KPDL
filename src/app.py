import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import json
from datetime import datetime
from utils.load_data import load_csv

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="D·ª± ƒëo√°n gi√° nh√†",
    page_icon="üè†",
    layout="wide"
)

# Ti√™u ƒë·ªÅ
st.title("üè† D·ª± ƒëo√°n gi√° nh√† ƒë·∫•t")
st.markdown("---")

# H√†m chuy·ªÉn ƒë·ªïi gi√° tr·ªã LegalStatus
def convert_legal_status_to_label(status: str) -> int:
    """
    Chuy·ªÉn ƒë·ªïi gi√° tr·ªã LegalStatus t·ª´ text sang s·ªë theo label encoding
    """
    status_map = {
        "C√≥": 1,
        "Kh√¥ng": 0
    }
    return status_map.get(status, 0)  # M·∫∑c ƒë·ªãnh l√† "Kh√¥ng" n·∫øu kh√¥ng t√¨m th·∫•y

# H√†m chuy·ªÉn ƒë·ªïi gi√° tr·ªã Furnishing
def convert_furnishing_to_label(furnishing: str) -> int:
    """
    Chuy·ªÉn ƒë·ªïi gi√° tr·ªã Furnishing t·ª´ text sang s·ªë theo label encoding
    """
    furnishing_map = {
        "C√≥": 1,
        "Kh√¥ng": 0
    }
    return furnishing_map.get(furnishing, 0)  # M·∫∑c ƒë·ªãnh l√† "Kh√¥ng" n·∫øu kh√¥ng t√¨m th·∫•y

# Load d·ªØ li·ªáu ƒë·ªãa l√Ω
@st.cache_resource
def load_location_data():
    base_dir = os.path.dirname(os.path.abspath(__file__))
    wiki_path = os.path.join(base_dir, 'data', 'raw', 'wiki.json')
    if not os.path.exists(wiki_path):
        st.error(f"Kh√¥ng t√¨m th·∫•y file wiki.json t·∫°i: {wiki_path}")
        return {}
    with open(wiki_path, 'r', encoding='utf-8') as f:
        return json.load(f)

# Load model v√† scaler
@st.cache_resource
def load_models_and_scalers():
    # ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c models
    base_dir = os.path.dirname(os.path.abspath(__file__))
    models_dir = os.path.join(base_dir, 'models')
    
    if not os.path.exists(models_dir):
        st.error(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c models t·∫°i: {models_dir}")
        return {}, {}
    
    # Dictionary ƒë·ªÉ l∆∞u c√°c model
    models = {}
    
    # T√¨m t·∫•t c·∫£ c√°c file model trong th∆∞ m·ª•c
    model_files = [f for f in os.listdir(models_dir) if f.endswith('.joblib') and f != 'scalers.joblib']
    
    # Th√¥ng tin v·ªÅ c√°c model
    model_info = {
        'lightgbm_model.joblib': 'LightGBM (Best - R2: 0.786)',
        'xgboost_model.joblib': 'XGBoost (R2: 0.781)',
        'random forest_model.joblib': 'Random Forest (R2: 0.769)',
        'linear regression_model.joblib': 'Linear Regression (R2: 0.518)',
        'knn_model.joblib': 'KNN (R2: 0.612)',
        'best_model.joblib': 'Best Model (R2: 0.786)'
    }
    
    # Load t·∫•t c·∫£ c√°c model
    for model_file in model_files:
        model_path = os.path.join(models_dir, model_file)
        try:
            model = joblib.load(model_path)
            # L·∫•y t√™n hi·ªÉn th·ªã t·ª´ model_info ho·∫∑c s·ª≠ d·ª•ng t√™n file
            display_name = model_info.get(model_file, model_file.replace('_model.joblib', '').title())
            models[display_name] = model
            # st.success(f"ƒê√£ t·∫£i th√†nh c√¥ng model: {display_name}")
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ t·∫£i model {model_file}: {str(e)}")
    
    # Load scalers
    scaler_path = os.path.join(models_dir, 'scalers.joblib')
    if not os.path.exists(scaler_path):
        st.error(f"Kh√¥ng t√¨m th·∫•y file scaler t·∫°i: {scaler_path}")
        return models, {}
    
    try:
        scalers = joblib.load(scaler_path)
        return models, scalers
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i scaler: {str(e)}")
        return models, {}

try:
    models, scalers = load_models_and_scalers()
    location_data = load_location_data()
    if not models:
        st.error("Kh√¥ng t√¨m th·∫•y model n√†o ƒë·ªÉ d·ª± ƒëo√°n.")
        st.stop()
except Exception as e:
    st.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ho·∫∑c d·ªØ li·ªáu ƒë·ªãa l√Ω. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† file.")
    st.stop()

# Ch·ªçn model
st.subheader("Ch·ªçn m√¥ h√¨nh d·ª± ƒëo√°n")
model_names = list(models.keys())
selected_model = st.selectbox(
    "M√¥ h√¨nh",
    model_names,
    index=0,
    help="Ch·ªçn m√¥ h√¨nh ƒë·ªÉ d·ª± ƒëo√°n gi√° nh√†"
)

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ model ƒë∆∞·ª£c ch·ªçn
if selected_model:
    st.info(f"""
    **Th√¥ng tin m√¥ h√¨nh:**
    - {selected_model}
    - ƒê·ªô ch√≠nh x√°c (R2) ƒë∆∞·ª£c t√≠nh tr√™n t·∫≠p test
    """)

# Ch·ªçn ƒë·ªãa ch·ªâ (t√°ch ri√™ng kh·ªèi form)
st.subheader("ƒê·ªãa ch·ªâ")
if not location_data:
    st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªãa l√Ω. Vui l√≤ng ki·ªÉm tra l·∫°i file wiki.json")
    st.stop()

provinces = list(location_data.keys())
selected_province = st.selectbox(
    "T·ªânh/Th√†nh ph·ªë",
    provinces,
    help="Ch·ªçn t·ªânh/th√†nh ph·ªë ƒë·ªÉ xem danh s√°ch qu·∫≠n/huy·ªán v√† th√¥ng tin chi ti·∫øt"
)

# C·∫≠p nh·∫≠t danh s√°ch qu·∫≠n/huy·ªán d·ª±a tr√™n t·ªânh/th√†nh ph·ªë ƒë∆∞·ª£c ch·ªçn
districts = list(location_data[selected_province].keys())
selected_district = st.selectbox(
    "Qu·∫≠n/Huy·ªán",
    districts,
    help="Th√¥ng tin s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông khi ch·ªçn qu·∫≠n/huy·ªán"
)

# L·∫•y th√¥ng tin v·ªÅ qu·∫≠n/huy·ªán ƒë∆∞·ª£c ch·ªçn
district_info = location_data[selected_province][selected_district]
commune_density = float(district_info['distribute'].replace('.', ''))
commune_count = int(district_info['communes'])

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ qu·∫≠n/huy·ªán
st.info(f"""
**Th√¥ng tin {selected_district.title()}:**
- M·∫≠t ƒë·ªô d√¢n s·ªë: {commune_density:,.0f} ng∆∞·ªùi/km¬≤
- S·ªë ph∆∞·ªùng/x√£: {commune_count}
- Di·ªán t√≠ch: {district_info['area']} km¬≤
- D√¢n s·ªë: {district_info['number_people']} ng∆∞·ªùi

*Th√¥ng tin s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi b·∫°n thay ƒë·ªïi t·ªânh/th√†nh ph·ªë ho·∫∑c qu·∫≠n/huy·ªán*
""")

# T·∫°o form nh·∫≠p li·ªáu
with st.form("prediction_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Th√¥ng tin c∆° b·∫£n")
        area = st.number_input("Di·ªán t√≠ch (m¬≤)", min_value=0.0, value=100.0)
        bedrooms = st.number_input("S·ªë ph√≤ng ng·ªß", min_value=0, value=2)
        bathrooms = st.number_input("S·ªë ph√≤ng t·∫Øm", min_value=0, value=1)
        floors = st.number_input("S·ªë t·∫ßng", min_value=0, value=1)
        
    with col2:
        st.subheader("Th√¥ng tin b·ªï sung")
        access_width = st.number_input("ƒê∆∞·ªùng v√†o (m)", min_value=0.0, value=4.0)
        facade_width = st.number_input("M·∫∑t ti·ªÅn (m)", min_value=0.0, value=5.0)
        
    st.subheader("Tr·∫°ng th√°i")
    col3, col4 = st.columns(2)
    
    with col3:
        legal_status = st.radio("Ph√°p l√Ω", ["C√≥", "Kh√¥ng"])
        
    with col4:
        furnishing = st.radio("N·ªôi th·∫•t", ["C√≥", "Kh√¥ng"])
    
    # N√∫t d·ª± ƒëo√°n
    submit_button = st.form_submit_button("D·ª± ƒëo√°n gi√°")

# X·ª≠ l√Ω d·ª± ƒëo√°n
if submit_button:
    try:
        # T·∫°o DataFrame t·ª´ input v·ªõi th·ª© t·ª± c·ªôt c·ªë ƒë·ªãnh
        input_data = pd.DataFrame({
            'Area': [area],
            'Bedrooms': [bedrooms],
            'Bathrooms': [bathrooms],
            'Floors': [floors],
            'AccessWidth': [access_width],
            'FacadeWidth': [facade_width],
            'LegalStatus': [convert_legal_status_to_label(legal_status)],
            'Furnishing': [convert_furnishing_to_label(furnishing)],
            'CommuneDensity': [commune_density],
            'CommuneCount': [commune_count]   
        })
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu
        numeric_cols = ['Area', 'Bedrooms', 'Bathrooms', 'Floors', 'AccessWidth', 
                       'FacadeWidth', 'CommuneDensity', 'CommuneCount']
        
        # Ki·ªÉm tra v√† √°p d·ª•ng scaler cho t·ª´ng c·ªôt
        for col in numeric_cols:
            if col in scalers:
                try:
                    input_data[col] = scalers[col].transform(input_data[[col]])
                except Exception as e:
                    st.warning(f"Kh√¥ng th·ªÉ chu·∫©n h√≥a c·ªôt {col}: {str(e)}")
        
        # D·ª± ƒëo√°n v·ªõi model ƒë√£ ch·ªçn
        model = models[selected_model]
        
        # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt gi·ªëng v·ªõi training data
        expected_columns = [
            'Area', 'Bedrooms', 'Bathrooms', 'Floors', 'AccessWidth', 
            'FacadeWidth',  'LegalStatus', 'Furnishing','CommuneDensity', 'CommuneCount'
           
        ]
        input_data = input_data[expected_columns]
        
        # In ra th√¥ng tin debug
        # st.write("Debug - Input data columns:", input_data.columns.tolist())
        # st.write("Debug - Input data shape:", input_data.shape)
        
        # D·ª± ƒëo√°n
        prediction = model.predict(input_data)[0]
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.markdown("---")
        st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n")
        
        # T·∫°o 3 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Gi√° d·ª± ƒëo√°n", f"{prediction:,.2f} t·ª∑ ƒë·ªìng")
        
        with col2:
            st.metric("Gi√°/m¬≤", f"{(prediction * 1000 / area):,.0f} tri·ªáu ƒë·ªìng/m¬≤")
        
        with col3:
            st.metric("Th·ªùi gian d·ª± ƒëo√°n", datetime.now().strftime("%H:%M:%S"))
        
        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
        st.markdown("### Th√¥ng tin chi ti·∫øt")
        st.markdown(f"""
        - M√¥ h√¨nh s·ª≠ d·ª•ng: {selected_model}
        - ƒê·ªãa ch·ªâ: {selected_district.title()}, {selected_province.title()}
        - Di·ªán t√≠ch: {area:,.1f} m¬≤
        - S·ªë ph√≤ng ng·ªß: {bedrooms}
        - S·ªë ph√≤ng t·∫Øm: {bathrooms}
        - S·ªë t·∫ßng: {floors}
        - ƒê∆∞·ªùng v√†o: {access_width:,.1f} m
        - M·∫∑t ti·ªÅn: {facade_width:,.1f} m
        - M·∫≠t ƒë·ªô d√¢n s·ªë: {commune_density:,.0f} ng∆∞·ªùi/km¬≤
        - S·ªë ph∆∞·ªùng/x√£: {commune_count}
        - Ph√°p l√Ω: {legal_status}
        - N·ªôi th·∫•t: {furnishing}
        """)
        
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra khi d·ª± ƒëo√°n: {str(e)}")
        st.error("Chi ti·∫øt l·ªói:")
        st.error(str(e.__class__.__name__))
        st.error(str(e))
        # In th√™m th√¥ng tin debug
        st.write("Debug - Input data:", input_data)
        st.write("Debug - Model type:", type(model))
        st.write("Debug - Model features:", getattr(model, 'feature_names_', None))

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi HM&KPDL Team</p>
    <p>¬© 2024 - Phi√™n b·∫£n 1.0</p>
</div>
""", unsafe_allow_html=True) 